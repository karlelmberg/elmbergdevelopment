@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Web.Business.Extensions
@using Web.Models.Pages

@model Web.Models.ViewModels.PageViewModel<Web.Models.Pages.ArticleListPage>

@{
    // here we do the serialization of our dictionary into JSON using Newtonsoft.Json package
    // this object will be used in our Vue application

    // over the years of web development, I've found out that the following
    // serialization solves the problems I've encountered so far

    // in a real app this would be created as a helper method somewhere
    // if we want to exclude the c# code from our view
    //var serializationSettings = new JsonSerializerSettings()
    //{
    //    ContractResolver = new CamelCasePropertyNamesContractResolver(),
    //    StringEscapeHandling = StringEscapeHandling.EscapeHtml
    //};

    //var data =
    //    Html.Raw(
    //        HttpUtility.JavaScriptStringEncode(
    //            JsonConvert.SerializeObject(
    //                Model.CurrentPage.ArticleListPageViewModel.VueData, Formatting.None, serializationSettings
    //                ),
    //            false)
    //        );
}



<div id="articlesVueApp" v-init:slug="'my-awesome-blog-post'">
    <div class="article-list-page">
        <div class="container">
            <div class="row">
                <div class="main-text">
                    {{heading}}
                </div>
            </div>
        </div>
    </div>
</div>

@*:setInitData="('@JsonConvert.SerializeObject(@Model.CurrentPage.Heading)', '@JsonConvert.SerializeObject(@Model.CurrentPage.Ingress)')">*@

<script src="~/Static/js/vue/Pages/ArticleListPage.js"></script>